<?php

/**
 * @file
 * Custom Media module.
 */

use Drupal\Component\Utility\Html;
use Drupal\media\OEmbed\Provider;

/**
 * Implements hook_media_source_info_alter().
 */
function custom_media_media_source_info_alter(array &$sources) {
  module_load_include('inc', 'custom_media', 'custom_media_oembed_providers');
  // Load the full list of oEmbed providers.
  $providers = custom_media_oembed_providers_list();
  // Add a source option that will allow the full list of providers.
  $sources['cmu_remote_media'] = [
    'id' => 'cmu_remote_media',
    'label' => t('Remote media'),
    'description' => t('Use the Remote Media source for creating media assets from a list of supported OEmbed providers.'),
    'allowed_field_types' => ['string'],
    'default_thumbnail_filename' => 'generic.png',
    'providers' => $providers,
    'class' => 'Drupal\media\Plugin\media\Source\OEmbed',
    'default_name_metadata_attribute' => 'default_name',
    'thumbnail_uri_metadata_attribute' => 'thumbnail_uri',
    // If this is not here we have a warning every time a type using this source
    // is saved:
    'provider' => 'custom_media',
  ];
}

/**
 * Implements hook_oembed_resource_data_alter().
 */
function custom_media_oembed_resource_data_alter(array &$data, $url) {
  // If the data is from the Facebook provider, we want to retrieve a thumbnail
  // image for the media item.
  if ($data['provider_name'] === 'Facebook') {
    // Set the default thumbnail to the image provided in custom_media.
    $data['thumbnail_url'] = file_create_url(drupal_get_path('module', 'custom_media') . '/images/icons/facebook.png');
    $data['thumbnail_height'] = 180;
    $data['thumbnail_width'] = 180;
    // Get the html data.
    $data_html = $data['html'];
    // Convert the html data to the Document Object Model.
    $dom = Html::load($data_html);
    // Get all of the divs in the html DOM.
    $divs = $dom->getElementsByTagName('div');
    $data_href = '';
    // Loop through the divs to locate the data-href attribute.
    foreach ($divs as $div) {
      // If the div has the data-href attribute we want to save that in a
      // variable.
      if ($div->hasAttribute('data-href')) {
        $data_href = $div->getAttribute("data-href");
        break;
      }
    }
    // If there are no divs with the data-href attribute, skip thumbnail
    // retrieval.
    if (!$data_href){
      return;
    }
    // Explode the data-href url into an array.
    $data_url_array = array_filter(explode('/', $data_href));
    // If data-href contains '?v=', remove that string from the last value in
    // the array. Otherwise store the last value in the array as the video ID.
    if (strpos($data_href, '?v=') !== FALSE) {
      $video_id = str_replace('?v=', '', array_pop($data_url_array));
    }
    else {
      $video_id = array_pop($data_url_array);
    }
    // Call the custom service method to retrieve a thumbnail image from the
    // Facebook Graph API.
    // @todo: This needs further testing when the Facebook App has pages_read_engagement permission.
    $thumbnail = \Drupal::service('custom_media.facebook_graph')->getVideoImage($video_id);
    // If a thumbnail is retrieved, add the information to the data array.
    if ($thumbnail) {
      $data['thumbnail_url'] = $thumbnail['data']['url'];
      $data['thumbnail_height'] = $thumbnail['data']['height'];
      $data['thumbnail_width'] = $thumbnail['data']['width'];
    }
  }
}

/**
 * Implements hook_oembed_providers_alter().
 */
function custom_media_oembed_providers_alter(array &$providers) {
  // Alter the Facebook provider information to ensure new oEmbed endpoints are
  // used until these changes have been merged:
  // https://github.com/iamcal/oembed/pull/492.
  $facebook_key = array_search('Facebook', array_column($providers, 'provider_name'));
  if ($facebook_key !== FALSE) {
    // Alter the post endpoint information.
    $providers[$facebook_key]['endpoints'][0]['discovery'] = FALSE;
    $providers[$facebook_key]['endpoints'][0]['docs_url'] = 'https://developers.facebook.com/docs/plugins/oembed';
    $providers[$facebook_key]['endpoints'][0]['url'] = 'https://graph.facebook.com/v8.0/oembed_post';
    $providers[$facebook_key]['endpoints'][0]['example_urls'][0] = 'https://graph.facebook.com/v8.0/oembed_page?url=https%3A%2F%2Fwww.facebook.com%2FCDC&access_token=96481...';
    // Alter the video endpoint information.
    $providers[$facebook_key]['endpoints'][1]['discovery'] = FALSE;
    $providers[$facebook_key]['endpoints'][1]['docs_url'] = 'https://developers.facebook.com/docs/plugins/oembed';
    $providers[$facebook_key]['endpoints'][1]['url'] = 'https://graph.facebook.com/v8.0/oembed_video';
    $providers[$facebook_key]['endpoints'][1]['example_urls'][0] = 'https://graph.facebook.com/v8.0/oembed_video?url=https%3A%2F%2Fwww.facebook.com%2FCDC&access_token=96481...';
  }
}

/**
 * Implements hook_oembed_resource_url_alter().
 */
function custom_media_oembed_resource_url_alter(array &$parsed_url, Provider $provider) {
  // Add the access token to the Facebook resource url.
  if ($provider->getName() === 'Facebook') {
    // Retrieve environment variable data.
    $facebook_app_id = getenv('FACEBOOK_APP_ID');
    $facebook_app_client_token = getenv('FACEBOOK_APP_CLIENT_TOKEN');
    // If the environment variables are not available, log an error.
    if (!$facebook_app_id || !$facebook_app_client_token) {
      \Drupal::logger('media')->error(t('Cannot add a Facebook post or video because credentials are missing on the server.'));
      return;
    }
    // Create an authentication token.
    $parsed_url['query']['access_token'] = $facebook_app_id . '|' . $facebook_app_client_token;
  }
}
